# Dockerfile para producción del frontend
FROM node:18-alpine AS builder

# Agregar estas líneas para solucionar problemas de build en Alpine
ENV ROLLUP_SKIP_LOAD_NATIVE_BINARY=true
ENV npm_config_build_from_source=true
ENV ESBUILD_BINARY_PATH=/usr/local/bin/esbuild
ENV VITE_LEGACY_BUILD=false
ENV NODE_OPTIONS="--max-old-space-size=4096"

# Instalar dependencias del sistema necesarias
RUN apk add --no-cache python3 make g++ libc6-compat

# Establecer directorio de trabajo
WORKDIR /app

# Copiar package.json y package-lock.json
COPY package*.json ./

# Limpiar cache y instalar dependencias (solución para el bug de rollup en Alpine)
RUN npm cache clean --force \
    && rm -rf node_modules package-lock.json \
    && npm install \
    && npm rebuild \
    && chmod +x node_modules/.bin/*

# Copiar código fuente
COPY . .

# Dar permisos ejecutables a todos los binarios de node_modules
RUN find node_modules/.bin -type f -exec chmod +x {} \;


# Construir la aplicación (devDependencies disponibles)
RUN npm run build
# Ahora sí, establecer NODE_ENV=production para la imagen final
ENV NODE_ENV=production

# Etapa de producción con Nginx
FROM nginx:alpine

# Copiar archivos construidos
COPY --from=builder /app/dist /usr/share/nginx/html

# Copiar manualmente archivos importantes de public
COPY --from=builder /app/public/ /usr/share/nginx/html/

# Copiar script para deshabilitar Vite HMR (ahora desde la carpeta frontend)
COPY disable-vite-client.js /usr/share/nginx/html/disable-vite-client.js

# Copiar configuración de Nginx
COPY nginx.conf /etc/nginx/conf.d/default.conf

# Exponer puerto
EXPOSE 80

# Comando por defecto
CMD ["nginx", "-g", "daemon off;"]